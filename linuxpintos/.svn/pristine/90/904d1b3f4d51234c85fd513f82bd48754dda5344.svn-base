#include "userprog/syscall.h"
#include <stdio.h>
#include <syscall-nr.h>
#include "threads/interrupt.h"
#include "threads/thread.h"
#include "threads/init.h"

static void syscall_handler (struct intr_frame *);

void
syscall_init (void) 
{
  intr_register_int (0x30, 3, INTR_ON, syscall_handler, "syscall");
}

static void
syscall_handler (struct intr_frame *f UNUSED) 
{
  //printf ("system call!\n");
  //thread_exit ();
  
  
  //Get syscall number from the stack
  int * sysnum = f->esp;
  int fd;
  void *buf;
  unsigned len;
  switch (*sysnum) 
    {
    //HALT
    case SYS_HALT :
      power_off();
      break;
    case SYS_EXIT:
      break;
    case SYS_WAIT:
      break;
    case SYS_OPEN:
      break;
    case SYS_CLOSE:
      break;
    case SYS_WRITE:
      fd = (int)f->esp+4; //??
      buf = f->esp+8; //??
      len = (int)f->esp+12; //?
      if(fd == STDOUT_FILENO){
	putbuf(buf, len);
      }
      break;
    case SYS_CREATE:
      break;
    case SYS_READ:
      break;
    default:
      printf("system call!\n");
      thread_exit();
      break;
    }
}
